
///////////////////////////////////////////////.cpp station
std::vector<int> Station::BFS(int n0) const
{
    ///Marquage
    enum {Blanc, Gris};
    std::vector<int> couleur((int)m_sommets.size(),Blanc);
    ///pour noter les prédécesseurs : on note les numéros des prédécesseurs
    std::vector<int> preds((int)m_sommets.size(),-1);

    ///déclaration de la file
    std::queue<Points*> file;

    ///On enfile et on marque le sommet initial
    couleur[n0] = Gris;
    file.push(m_sommets[n0]);

    Points*p;
    while(!file.empty())
    {
        ///on défile le prochain sommet
        p=file.front();
        file.pop();

        ///pour chaque successeur du sommet défilé
        for(auto succ:p->getAdjacent())
        {
            ///s'il n'est pas marqué
            if(couleur[succ->getNum()-1] == Blanc)
            {
                ///On le marque
                couleur[succ->getNum()-1] = Gris;
                ///On note son prédecesseur (=le sommet défilé)
                preds[succ->getNum()-1]=p->getNum()-1;
                ///On le met dans la file
                file.push(succ);
            }
        }
    }
    return preds;
}



void Station::afficheBFS(size_t num, std::vector<int>& arbre)
{
    for(int i=0; i<arbre.size(); ++i)
    {
        if(i!=num)
        {
            if(arbre[i]!=-1)
            {
                int j=i;
                std::cout << j+1;

                while(arbre[j]!=num)
                {
                    std::cout << " <-- "<<arbre[j]+1;

                    j=arbre[j];
                }
                std::cout<<" <-- "<<num+1;
                std::cout << std::endl;
            }
        }
    }
}
Station::Station(std::string nomFichier)
{
    std::ifstream ifs{nomFichier};
    if (!ifs)
        throw std::runtime_error( "Impossible d'ouvrir en lecture " + nomFichier );
    int ordre;
    ifs >> ordre;
    if ( ifs.fail() )
        throw std::runtime_error("Probleme lecture ordre du graphe");
    int n, altitude;
    std::string pointDinteret;
    for (int i=0; i<ordre; ++i)
    {
        ifs >> n>> pointDinteret>>altitude;
        m_sommets.push_back( new Points{n,altitude} );
    }
    int taille;
    ifs >> taille;
    if ( ifs.fail() )
        throw std::runtime_error("Probleme lecture taille du graphe");
    int numeroTrajet, num1,num2;
    std::string NomTrajet,TypeTrajet;
    for (int i=0; i<taille; ++i)
    {
        ifs>>numeroTrajet>>NomTrajet>>TypeTrajet>>num1>>num2;
        if ( ifs.fail() )
            throw std::runtime_error("Probleme lecture arc");
        Trajet* t=new Trajet(m_sommets[num1-1],m_sommets[num2-1], 0,TypeTrajet,NomTrajet);
        m_aretes.push_back(t);//le graphe débute à 1, donc on soustrait 1

        //m_liaison=std::make_pair(m_sommets[num2],TypeTrajet);//association du poids de la liaison avec le deuxième sommet
        m_sommets[num1-1]->ajouterAd(m_sommets[num2-1]);
        m_sommets[num1-1]->ajouterSucc(t);//association de la liaison avec le sommet auquel elle est rattachée


    }
    int dureeFixe,dureeDenivele;
    for(int i=0; i<15; i++)
    {
        ifs>>TypeTrajet>>dureeFixe>>dureeDenivele;
        m_duree.push_back(new Duree(dureeFixe,dureeDenivele,TypeTrajet));
    }
    for (auto s:m_aretes)
    {
        int t;
        for (auto it:m_duree)
        {
            if(s->getType()==it->getParcours())
            {
                t=it->calculDuree(s);
            }
            s->setDuree(t);
        }
    }
}
//////////////////////////////////////////////////////////main 
void PlusCourt(Station &LeG)
{
    system("cls");
    char choix;
    do
    {
        std::cout<<"1) Moins de trajet      2) Moins de temps"<<std::endl;
        std::cin>>choix;
    }
    while(choix!='1' && choix!='2');

    switch(choix)
    {
    case '1':
    {
        BFS(LeG);
        break;
    }
    case '2':
    {
        //Drij(LeG);
        break;
    }
    }
}

void BFS(Station &LeGraphe)
{
    int sommet;
    do
    {
        std::cout<<"De quel sommet voulez vous partir ?"<<std::endl;
        std::cin>>sommet;
    }
    while(sommet<0 && sommet >37);

    std::vector<int> arbre_BFS = LeGraphe.BFS(sommet-1);

    LeGraphe.afficheBFS(sommet-1,arbre_BFS);

}



void Menu()
{

    Station graphe("fichier.txt");
    char choix;
    int test;
    std::cout<<"Bienvenue dans notre sur la Borne Interactive de votre Domaine Skiable prefere !! "<<std::endl;
    std::cout<<std::endl;
    do
    {
        std::cout<<"Que voulez vous faire ? :"<<std::endl;
        std::cout<< "1) Savoir les Points d'arrive et de Depart d'un trajet  "<<std::endl;
        std::cout<<"2) Savoir les trajet relies a un point  "<<std::endl;
        std::cout<<"3) Plus court chemin d'un point vers les autres";
        std::cin>>choix;
        std::cout<<std::endl;
    }
    while(choix != '1' && choix!='2' && choix!='3');

    switch(choix)
    {
    case '1':
    {
        Parcours(graphe);
        break;
    }
    case '2':
    {
        Chemin(graphe);
        break;
    }
    case '3':
    {
        PlusCourt(graphe);
        break;
    }

    }
}
