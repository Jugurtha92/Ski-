/////////////.h
class Point
{
private:
    int m_num;
    vector <Trajet*> m_trajet;
    int m_altitude;
public:
    Point(int _num, int _altitude);
    ~Point();
    
    int getNum()const;
    int getAltitude()const;
    void ajouterSucc( Trajet*t);

};
//////////.cpp
Point::Point(int _num,int _altitude)
    :m_num(_num),m_altitude(_altitude)
{
}
Point::~Point()
{
}

int Point::getNum()const
{
    return m_num;
}
int Point::getAltitude()const
{
    return m_altitude;
}
void Point::ajouterSucc( Trajet*t)
{
    m_trajet.push_back(t);
}
/////////////.h
class Lieu
{
private:
     std::string m_nom;
     std::vector<Point*> m_points;
public:
    Lieu(std::string _nom);
    ~Lieu();
};
//////////.cpp
Lieu::Lieu(std::string _nom)
    :m_nom(_nom);
{

}
Lieu::~Lieu()
{
}


/////////////.h
class Trajet
{
private:
    Point *m_depart;
    Point *m_arrive;
    int m_duree;
    std::string m_type;
    std::string m_nom;
public:
    Trajet(Point* _depart, Point* _arrive, int _duree, std::string _type);
    ~Trajet();
    
    Point* getDepart()const;
    Point* getArrive()const;
    int getDuree()const;
    std::string getType()const;
    std::string getNom()const;
    int calculDenivele();
    void setDuree(int duree);
};
/////////////.cpp
Trajet::Trajet(Point* _depart,Point* _arrive,int _duree,std::string _type)
    :m_depart(_depart),m_arrive(_arrive),m_duree(_duree),m_type(_type)
{
    
}
Trajet::~Trajet()
{

}
Point* Trajet::getDepart()const
{
    return m_depart;
}
Point* Trajet::getArrive()const
{
    return m_arrive;
}
int Trajet::getDuree()const
{
    return m_duree;
}
std::string Trajet::getType()const
{
    return m_type;
}
std::string Trajet::getNom()const
{
    return m_nom;
}
int Trajet::calculDenivele()
{
    return std::max(m_depart->getAltitude(),m_arrivee->getAltitude())-std::min(m_depart->getAltitude(),m_arrivee->getAltitude());
}
void Trajet::setDuree(int duree)
{
    m_duree=duree;
}
/////////////.h
class Duree
{
private:
    int m_dureeFixe;
    int m_dureeDenivele;
    std::string m_parcours;
public:
    Duree(int _DureeFixe, int _DureeDenivele, std::string _Parcours);
    ~Duree();
    int getDureeFixe() const;
    int getDureeDenivele() const;
    std::string getParcours()const;
    int calculDuree(Trajet* t);
};

/////////////.cpp
Duree::Duree(int _dureeFixe, int _dureeDenivele, std::string _parcours)
    :m_dureeFixe(_dureeFixe),m_dureeDenivele(_dureeDenivele),m_parcours(_parcours)
{

}
Duree::~Duree()
{

}
int Duree::getDureeFixe()const
{
    return m_dureeFixe;
}
int Duree::getDureeDenivele()const
{
    return m_dureeDenivele;
}
std::string Duree::getParcours()const
{
    return m_parcours;
}
int Duree::calculDuree(Trajet* t)
{
    int dureeTotale;
    dureeTotale=t->calculDenivele()*m_dureeDenivele/100+m_dureeFixe;
    return dureeTotale;
}
/////////////.h
class Station
{
private :
    ///liste des sommets (vecteur de pointeurs sur Sommet)
    std::vector<Point*> m_sommets;
    std::vector<Trajet*> m_aretes;
    std::pair<Point*,int> m_liaison;
    std::vector<Duree*> m_duree;
public :
    /* La construction du réseau peut se faire à partir d'un fichier
     dont le nom est passé en paramètre
    Le fichier contient : ordre, taille, liste des arcs */

    Station(std::string nomFichier);

    void afficher() const;
    void afficheTraj()const;
    void ChoixTraj(int choix);
    void ChoixP(int choix1);
void dijkstra(int numDebut, int numFin);
};
/////////////.cpp
Station::Station(std::string nomFichier)
{
    std::ifstream ifs{nomFichier};
    if (!ifs)
        throw std::runtime_error( "Impossible d'ouvrir en lecture " + nomFichier );

    int ordre;
    ifs >> ordre;
    if ( ifs.fail() )
        throw std::runtime_error("Probleme lecture ordre du graphe");
    int n, altitude;
    std::string pointDinteret;
    for (int i=0; i<ordre; ++i)
    {
        ifs >> n>> pointDinteret>>altitude;
        m_sommets.push_back( new Point{n,altitude} );
    }

    int taille;
    ifs >> taille;
    if ( ifs.fail() )
        throw std::runtime_error("Probleme lecture taille du graphe");
    int numeroTrajet, num1,num2;
    std::string NomTrajet,TypeTrajet;
    for (int i=0; i<taille; ++i)
    {
        ifs>>numeroTrajet>>NomTrajet>>TypeTrajet>>num1>>num2;
        if ( ifs.fail() )
            throw std::runtime_error("Probleme lecture arc");
        Trajet* t=new Trajet(m_sommets[num1-1],m_sommets[num2-1], 0,TypeTrajet,NomTrajet);
        m_aretes.push_back(t);//le graphe débute à 1, donc on soustrait 1


        m_sommets[num1-1]->ajouterSucc(t);//association de la liaison avec le sommet auquel elle est rattachée
    }
    int dureeFixe,dureeDenivele;
    for(int i=0; i<15; i++)
    {
        ifs>>TypeTrajet>>dureeFixe>>dureeDenivele;
        m_duree.push_back(new Duree(dureeFixe,dureeDenivele,TypeTrajet));
    }
    for (auto s:m_aretes)
    {
        int t;
        if(s->getType()=="BUS")
            {
                if((s->getNom()=="navette1600-1800")||(s->getNom()=="navette1800-1600"))
                {
                    s->setDuree(1800);
                }
                else
                {
                    s->setDuree(2400);
                }
            }
        for (auto it:m_duree)
        {
            if(s->getType()==it->getParcours())
            {
                t=it->calculDuree(s);
            }
            s->setDuree(t);
        }
    }

}
void Station::afficher() const
{
    std::cout<<std::endl<<"graphe ";
    std::cout<<"ordre = "<<m_sommets.size()<<std::endl<<"  ";
    std::cout<<"listes d'adjacence :"<<std::endl;
    for (auto s : m_sommets)
    {
        std::cout<<s->getNum()<<" "<<s->getAltitude()<<std::endl;
    }
    std::cout<<"liste des aretes :"<<std::endl;
    for (auto s:m_aretes)
    {
        std::cout<<s->getDepart()->getNum()<<" "<<s->getArrivee()->getNum()<<" "<<s->getDuree()<<" "<<s->getType()<<std::endl;
    }
    std::cout<<"duree:"<<std::endl;
    for(auto s: m_duree)
    {
        std::cout<<s->getDureeFixe()<<" "<<s->getDureeDenivele()<<" "<<s->getParcours()<<std::endl;
    }
    
}


void Station::afficheTraj() const
{

    for(int i=1; i!=m_aretes.size(); i++)
    {
        std::cout<<i<<": "<<m_aretes[i]->getDepart()->getNum()<<"----";
        std::cout<<m_aretes[i]->getArrive()->getNum()<<std::endl;
    }

}

void Station::ChoixTraj(int choix)
{
    std::cout<<"Le point "<<m_aretes[choix-1]->getDepart()->getNum()<<" en direction du point ";
    std::cout<<m_aretes[choix-1]->getArrive()->getNum()<<std::endl;
    if(m_aretes[choix-1]->getType()=="TS")
    {
        std::cout<<"Voici le type du trajet : Telesiege" ;
    }
}


void Station::ChoixP(int dep)
{
    for(auto par : m_aretes)
    {
        if(par->getDepart()->getNum()==dep)
        {
            std::cout<<"Le sommet "<<par->getDepart()->getNum()<<" est un le point de depart en direction du point "<<par->getArrive()->getNum();
            std::cout<<std::endl;
        }
        if(par->getArrive()->getNum()==dep)
        {
            std::cout<<"Le sommet " <<par->getArrive()->getNum()<<" est le point d'arrive en provenance du point "<<par->getDepart()->getNum();
            std::cout<<std::endl;
        }
    }
}

void Station::dijkstra(int numDebut,int numFin)
{
    std::vector<int> distance;//distance
    std::vector<int> pred;//prédécesseurs du sommet
    std::vector<int> marque;//vecteur indiquant si un sommet est marqué ou pas
    int indice;
    for(unsigned int i=0; i<m_sommets.size(); i++)//initialisation des vecteurs
    {
        marque.push_back(0);
        distance.push_back(INFINI);
        pred.push_back(-1);
    }
// étape 0
    distance[numDebut]=0; //1er sommet, distance nulle

        // étapes 1 à n
    bool finBoucle=false;

    while (!finBoucle)
    {
        int distanceMinimum=INFINI;//dstance minimun au sommet, initialisée à INFINI

        for(unsigned int i=0; i<m_sommets.size(); i++)
        {
            if(marque[i]==0)
            {
                if(distance[i]<distanceMinimum)//si la distance du sommet i au sommet initial est inférieure à la distance précédemment enregisttrée
                {
                    distanceMinimum=distance[i];
                    indice=i;
                }
            }

        }
        marque[indice]=1;//le sommet est marqué
        if(indice==numFin)//fin de la boucle si l'indice est le numéro d'arrivée
        {
            finBoucle=true;
        }
        else
        {
            for (unsigned int i=0; i<m_sommets[indice]->getSuccesseurs().size(); ++i)
            {
                int nvDistance=distance[indice]+m_sommets[indice]->getSuccesseurs()[i]->getDuree();//calcul d'une distance passant par un successeur
                int indiceSuc=m_sommets[indice]->getSuccesseurs()[i]->getArrivee()->getNum()-1;//indice d'un successeur du sommet indice
                if(nvDistance<distance[indiceSuc])//Si la distance calculée est inférieure à la distance trouvée précédemment
                {
                    distance[indiceSuc]=nvDistance;//la distance nouvellement calculée calculée devient la distance de référence
                    pred[indiceSuc]=indice;//le sommet indice passe dans le tableau des prédécesseurs
                }
            }
        }

    }
    std::cout<<"trajet: ";
    do
    {
        std::cout<<indice+1<<" <- ";
        indice=pred[indice];
    }
    while(indice!=numDebut);//afficher la liste des sommets en partant du dernier sommet
    std::cout<<indice+1<<std::endl;
    indice=numFin;
    std::cout<<"duree (s): ";
    do
    {
        std::cout<<distance[indice]-distance[pred[indice]];
        indice=pred[indice];
        if(indice!=numDebut)
        {
            std::cout<<" + ";
        }
    }
    while(indice!=numDebut);//afficher la somme des distances en partant de la distance finale
    std::cout<<" = "<<distance[numFin]<<std::endl;

}
