#include <iostream>
#include <vector>

#include <fstream>

#define INFINI 100000
/////////////.cpp

Station::Station(std::string nomFichier)
{
    std::ifstream ifs{nomFichier};
    if (!ifs)
        throw std::runtime_error( "Impossible d'ouvrir en lecture " + nomFichier );

    int ordre;
    ifs >> ordre;
    if ( ifs.fail() )
        throw std::runtime_error("Probleme lecture ordre du graphe");
    int n, altitude;
    std::string pointDinteret;
    for (int i=0; i<ordre; ++i)
    {
        ifs >> n>> pointDinteret>>altitude;
        m_sommets.push_back( new Point{n,altitude} );
    }

    int taille;
    ifs >> taille;
    if ( ifs.fail() )
        throw std::runtime_error("Probleme lecture taille du graphe");
    int numeroTrajet, num1,num2;
    std::string NomTrajet,TypeTrajet;
    for (int i=0; i<taille; ++i)
    {
        ifs>>numeroTrajet>>NomTrajet>>TypeTrajet>>num1>>num2;
        if ( ifs.fail() )
            throw std::runtime_error("Probleme lecture arc");
        Trajet* t=new Trajet(m_sommets[num1-1],m_sommets[num2-1], 0,TypeTrajet,NomTrajet);
        m_aretes.push_back(t);//le graphe débute à 1, donc on soustrait 1

        //m_liaison=std::make_pair(m_sommets[num2],TypeTrajet);//association du poids de la liaison avec le deuxième sommet

        m_sommets[num1-1]->ajouterSucc(t);//association de la liaison avec le sommet auquel elle est rattachée
    }
    int dureeFixe,dureeDenivele;
    for(int i=0; i<15; i++)//nombre de temps de trajet
    {
        ifs>>TypeTrajet>>dureeFixe>>dureeDenivele;
        m_duree.push_back(new Duree(dureeFixe,dureeDenivele,TypeTrajet));
    }
    for (auto s:m_aretes)
    {
        int t;
        for (auto it:m_duree)
        {
            if(s->getType()=="BUS")
            {
                if((s->getNom()=="navette1600-1800")||(s->getNom()=="navette1800-1600"))
                {
                    s->setDuree(1800);
                }
                else
                {
                    s->setDuree(2400);
                }
            }
            else if(s->getType()==it->getParcours())
            {
                t=it->calculDuree(s);
                s->setDuree(t);
            }

        }
    }

}
void Station::dijkstra(int numDebut,int numFin)
{
    std::vector<int> distance;//distance
    std::vector<int> pred;//prédécesseurs du sommet
    std::vector<int> marque;//vecteur indiquant si un sommet est marqué ou pas
    int indice;
    for(unsigned int i=0; i<m_sommets.size(); i++)//initialisation des vecteurs
    {
        marque.push_back(0);
        distance.push_back(INFINI);
        pred.push_back(-1);
    }
// étape 0
    distance[numDebut]=0; //1er sommet, distance nulle

        // étapes 1 à n
    bool finBoucle=false;

    while (!finBoucle)
    {
        int distanceMinimum=INFINI;//dstance minimun au sommet, initialisée à INFINI

        for(unsigned int i=0; i<m_sommets.size(); i++)
        {
            if(marque[i]==0)
            {
                if(distance[i]<distanceMinimum)//si la distance du sommet i au sommet initial est inférieure à la distance précédemment enregisttrée
                {
                    distanceMinimum=distance[i];
                    indice=i;
                }
            }

        }
        marque[indice]=1;//le sommet est marqué
        if(indice==numFin)//fin de la boucle si l'indice est le numéro d'arrivée
        {
            finBoucle=true;
        }
        else
        {
            for (unsigned int i=0; i<m_sommets[indice]->getSuccesseurs().size(); ++i)
            {
                int nvDistance=distance[indice]+m_sommets[indice]->getSuccesseurs()[i]->getDuree();//calcul d'une distance passant par un successeur
                int indiceSuc=m_sommets[indice]->getSuccesseurs()[i]->getArrivee()->getNum()-1;//indice d'un successeur du sommet indice
                if(nvDistance<distance[indiceSuc])//Si la distance calculée est inférieure à la distance trouvée précédemment
                {
                    distance[indiceSuc]=nvDistance;//la distance nouvellement calculée calculée devient la distance de référence
                    pred[indiceSuc]=indice;//le sommet indice passe dans le tableau des prédécesseurs
                }
            }
        }

    }
    std::cout<<"trajet: ";
    do
    {
        std::cout<<indice+1<<" <- ";
        indice=pred[indice];
    }
    while(indice!=numDebut);//afficher la liste des sommets en partant du dernier sommet
    std::cout<<indice+1<<std::endl;
    indice=numFin;
    std::cout<<"duree (s): ";
    do
    {
        std::cout<<distance[indice]-distance[pred[indice]];
        indice=pred[indice];
        if(indice!=numDebut)
        {
            std::cout<<" + ";
        }
    }
    while(indice!=numDebut);//afficher la somme des distances en partant de la distance finale
    std::cout<<" = "<<distance[numFin]<<std::endl;

}
//////////main
int main()
{
    int numDebut, numFin;
    std::vector<Point*> bfs;
    Station arcs("data_arcs.txt");
    arcs.afficher();
    std::cout<<"Saisir numero debut :"<<std::endl;
    std::cin>>numDebut;
    std::cout<<"Saisir numero fin :"<<std::endl;
    std::cin>>numFin;
    arcs.dijkstra(numDebut-1,numFin-1);

    
    return 0;
}
